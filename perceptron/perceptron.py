# 퍼셉트론 = 뉴런
# 퍼셉트론은 입력 값과 활성화 함수를 사용해 출력 값을 다음으로 넘기는 가장 작은 신경망 단위입니다.
# 로지스틱 회귀가 곧 퍼셉트론의 개념이다.
# 로지스틱 회귀는 입력값을 놓고 활성화 함수에 의해 일정한 수준을 넘으면 참, 아니면 거짓을 반환함
# 중학교 수학 수준에 맞춰 설명했던 기울이 a나 y 절편 b와 같은 용어를 퍼셉트론의 개념에 맞춰 좀 더 '딥러닝답게' 표현
# y = ax + b(a는 기울기,b는 y절편)
# -> y = wx + b(w는 가중치(weight), b는 바이어스(bias = 선입견))
# 가중합(weighted sum)이란?
# 입력값(x)와 가중치(w)의 곱을 모두 더한 다음 거기에 바이어스(b)를 더한 값을 가중합이라고 한다.
# 가중합의 결과를 놓고 1 또는 0을 출력해서 다음으로 보낸다.
# 여기서 0과 1을 판단하는 함수가 있는데 이것이 바로 위에서 말한 활성화 함수(activation function)이다.
# 앞서 배웠던 시그모이드 함수 ( 1/1+e**(ax+b) ) 가 대표적인 활성화 함수의 예이다.
# 이러한 퍼셉트론의 과제는 사각형 종이에 흰점 두개와 검은점 두개가 있을때 직선을 그어 직선의 한쪽에는 흰색, 한쪽에는 검은색이 오게 할 수 있을까?
# 답은 불가능하다. 이를 해결하기 위해 AND,OR을 사용해보았지만 불가능.
# 그러나 XOR을 사용함으로써 이 문제를 해결할 수 있다는걸 발견했다. 이것이 퍼셉트론의 한계를 설명할때 나오는 XOR
# 그러나 그럼에도 불구하고 XOR은 직선상에 선을 그릴 수 없음.
# 그러다 발견한것이 바로 다중 퍼셉트론.
# 이 직선을 그을때 평면에서는 해결할 수 없기때문에 평면을 구부려 해결할 수 있다는 것을 알게되었고
# 이것이 바로 다중 퍼셉트론이다. 그리고 다중 퍼셉트론에서 은닉층(Hidden layer)를 만들면 은닉층이 좌표를 구부리는 효과가 생긴다.
# 은닉층을 만들어 공간을 왜곡시키면 두 영역을 가로지르는 선이 직선으로 바뀌게 된다.
# 이 다중 퍼셉트론을 이용해 XOR문제를 해결하는 코드를 작성해 보겠음.

import numpy as np

w11 = np.array([-2,-2])
w12 = np.array([2,2])
w2 = np.array([1,1])
b1 = 3
b2 = -1
b3 = -1

#MLP란? Multi Layer Perceptron
def MLP(x, w, b):
    y = np.sum(w*x) + b
    if y <= 0:
        return 0
    else:
        return 1

# NAND 게이트
def NAND(x1,x2):
    return MLP(np.array([x1,x2]),w11,b1)

# OR 게이트
def OR(x1,x2):
    return MLP(np.array([x1,x2]),w12,b2)

# AND 게이트
def AND(x1,x2):
    return MLP(np.array([x1,x2]),w2,b3)

# XOR 게이트
def XOR(x1,x2):
    return AND(NAND(x1,x2),OR(x1,x2))

if __name__ == '__main__':
    for x in [(0,0),(1,0),(0,1),(1,1)]:
        y = XOR(x[0],x[1])
        print("입력 값:" + str(x) + " 출력 값:" + str(y))
